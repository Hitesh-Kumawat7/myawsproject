---
# tasks file for deployment
- name: "create a launch configuration"
  ec2_lc:
    name: "{{launch_name}}"
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    image_id: "{{img_id}}"
    key_name: "{{keypair_name}}"
    region: "{{region}}"
    security_groups: ['{{sec_grp_name}}']
    instance_type: "{{instance_type}}"
    volumes:
    - device_name: /dev/sda1
      volume_size: 10
      volume_type: gp2
      iops: 3000
      delete_on_termination: true
  register: lc_out

- name: Create Auto Scalling Group
  ec2_asg:
      name: "{{asg_name}}"
      region: "{{ region }}"
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      launch_config_name: "{{launch_name}}"
      health_check_period: 300
      health_check_type: ELB
      desired_capacity: "{{ desired_instances }}"
      min_size: 2
      max_size: 6
      vpc_zone_identifier: ['{{pri_subnet1_id}}','{{pri_subnet2_id}}']
      replace_all_instances: true
      wait_for_instances: true
  register: autoscale
- debug:
        msg:
                - "{{autoscale.instances[1]}}"

- name: create load balancer
  ec2_elb_lb:
    name: "{{elb_name}}"
    state: present
    aws_access_key: "{{aws_access_key}}"
    aws_secret_key: "{{aws_secret_key}}"
    region: "{{region}}"
    security_group_ids: "{{sec_grp_id}}"

    instance_ids:
      - "{{autoscale.instances[0]}}"
      - "{{autoscale.instances[1]}}"
      - "{{autoscale.instances[2]}}"
      - "{{autoscale.instances[3]}}"

    subnets:
      - "{{pub_subnet1_id}}"
      - "{{pub_subnet2_id}}"

    listeners:
      - protocol: http 
        load_balancer_port: 80
        instance_port: 80
        proxy_protocol: True
  register: elb_output
- debug:
        msg:
                - "{{elb_output.elb.dns_name}}"
